--- ./node_modules/fabric-common/lib/impl/bccsp_pkcs11.js	1985-10-26 09:15:00.000000000 +0100
+++ ./node_modules/fabric-common/lib/impl/bccsp_pkcs11.js	2020-05-14 15:17:52.359946027 +0200
@@ -56,7 +56,7 @@
 	return callsite()[1].getFunctionName() +
 		'[' + callsite()[1].getLineNumber() + ']: ';
 };
-
+let pkcs11_global_logged = false;
 /**
  * PKCS#11-compliant implementation to support Hardware Security Modules.
  *
@@ -325,7 +325,10 @@
 			/*
 			 * Login with PIN. Error will be thrown if wrong PIN.
 			 */
-			pkcs11.C_Login(this._pkcs11Session, pkcs11UserType, pkcs11Pin);
+			if(!pkcs11_global_logged){
+				pkcs11.C_Login(this._pkcs11Session, pkcs11UserType, pkcs11Pin);
+				pkcs11_global_logged = true;
+			}
 			this._pkcs11Login = true;
 			logger.debug(__func() + 'session login successful');
 
@@ -404,22 +407,22 @@
 	 * Return SKI, EC point, and key handles.
 	 */
 	_pkcs11GenerateECKeyPair(pkcs11, pkcs11Session, pkcs11Token) {
-		// var ski = this._ski();
+		var ski = this._ski();
 		const privateKeyTemplate = [
-			// { type: pkcs11js.CKA_ID,        value: ski },
+			{ type: pkcs11js.CKA_ID,        value: ski },
 			{type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PRIVATE_KEY},
 			{type: pkcs11js.CKA_KEY_TYPE, value: pkcs11js.CKK_EC},
 			{type: pkcs11js.CKA_PRIVATE, value: this._pkcs11Login},
-			{type: pkcs11js.CKA_TOKEN, value: this._pkcs11Login && pkcs11Token},
+			{type: pkcs11js.CKA_TOKEN, value: /*this._pkcs11Login && pkcs11Token*/true},
 			{type: pkcs11js.CKA_SIGN, value: true},
-			{type: pkcs11js.CKA_DERIVE, value: true}
+			{type: pkcs11js.CKA_DERIVE, value: false}
 		];
 		const publicKeyTemplate = [
-			// { type: pkcs11js.CKA_ID,        value: ski },
+			{ type: pkcs11js.CKA_ID,        value: ski },
 			{type: pkcs11js.CKA_CLASS, value: pkcs11js.CKO_PUBLIC_KEY},
 			{type: pkcs11js.CKA_KEY_TYPE, value: pkcs11js.CKK_EC},
 			{type: pkcs11js.CKA_PRIVATE, value: false},
-			{type: pkcs11js.CKA_TOKEN, value: this._pkcs11Login && pkcs11Token},
+			{type: pkcs11js.CKA_TOKEN, value: /*this._pkcs11Login && pkcs11Token*/true},
 			{type: pkcs11js.CKA_VERIFY, value: true},
 			{
 				type: pkcs11js.CKA_EC_PARAMS,
@@ -471,23 +474,23 @@
 		/*
 			* Set CKA_ID of public and private key to be SKI.
 			*/
-		const ski = HashPrimitives.SHA2_256(ecpt, null /* We want a Buffer */);
-		this._pkcs11SetAttributeValue(
-			pkcs11, pkcs11Session, handles.publicKey,
-			[{type: pkcs11js.CKA_ID, value: ski}, {type: pkcs11js.CKA_LABEL, value: ski.toString('hex')}]);
-		this._pkcs11SetAttributeValue(
-			pkcs11, pkcs11Session, handles.privateKey,
-			[{type: pkcs11js.CKA_ID, value: ski}, {type: pkcs11js.CKA_LABEL, value: ski.toString('hex')}]);
-		logger.debug(__func() + 'pub  ski: ' + util.inspect(
-			(this._pkcs11GetAttributeValue(
-				pkcs11, pkcs11Session, handles.publicKey,
-				[{type: pkcs11js.CKA_ID}]))[0].value,
-			{depth: null}));
-		logger.debug(__func() + 'priv ski: ' + util.inspect(
-			(this._pkcs11GetAttributeValue(
-				pkcs11, pkcs11Session, handles.privateKey,
-				[{type: pkcs11js.CKA_ID}]))[0].value,
-			{depth: null}));
+		//const ski = HashPrimitives.SHA2_256(ecpt, null /* We want a Buffer */);
+		//this._pkcs11SetAttributeValue(
+		//	pkcs11, pkcs11Session, handles.publicKey,
+		//	[{type: pkcs11js.CKA_ID, value: ski}, {type: pkcs11js.CKA_LABEL, value: ski.toString('hex')}]);
+		//this._pkcs11SetAttributeValue(
+		//	pkcs11, pkcs11Session, handles.privateKey,
+		//	[{type: pkcs11js.CKA_ID, value: ski}, {type: pkcs11js.CKA_LABEL, value: ski.toString('hex')}]);
+		//logger.debug(__func() + 'pub  ski: ' + util.inspect(
+		//	(this._pkcs11GetAttributeValue(
+		//		pkcs11, pkcs11Session, handles.publicKey,
+		//		[{type: pkcs11js.CKA_ID}]))[0].value,
+		//	{depth: null}));
+		//logger.debug(__func() + 'priv ski: ' + util.inspect(
+		//	(this._pkcs11GetAttributeValue(
+		//		pkcs11, pkcs11Session, handles.privateKey,
+		//		[{type: pkcs11js.CKA_ID}]))[0].value,
+		//	{depth: null}));
 
 		return {ski, ecpt, pub: handles.publicKey, priv: handles.privateKey};
 
--- ./node_modules/fabric-network/lib/impl/wallet/hsmx509identity.js	1985-10-26 09:15:00.000000000 +0100
+++ ./node_modules/fabric-network/lib/impl/wallet/hsmx509identity.js	2020-05-14 15:12:33.624555429 +0200
@@ -32,6 +32,7 @@
             return {
                 credentials: {
                     certificate: x509Data.credentials.certificate,
+                    ski: x509Data.credentials.ski,
                 },
                 mspId: x509Data.mspId,
                 type: 'HSM-X.509',
@@ -45,6 +46,7 @@
         const data = {
             credentials: {
                 certificate: identity.credentials.certificate,
+                ski: identity.credentials.ski,
             },
             mspId: identity.mspId,
             type: 'HSM-X.509',
@@ -57,10 +59,10 @@
         const user = new fabric_common_1.User(name);
         user.setCryptoSuite(cryptoSuite);
         const publicKey = await cryptoSuite.importKey(identity.credentials.certificate);
-        const privateKeyObj = await cryptoSuite.getKey(publicKey.getSKI());
+        const privateKeyObj = await cryptoSuite.getKey(identity.credentials.ski);
         await user.setEnrollment(privateKeyObj, identity.credentials.certificate.toString(), identity.mspId, true);
         return user;
     }
 }
 exports.HsmX509Provider = HsmX509Provider;
-//# sourceMappingURL=hsmx509identity.js.map
\ No newline at end of file
+//# sourceMappingURL=hsmx509identity.js.map
